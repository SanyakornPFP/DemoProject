//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 12/22/2023 9:22:09 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using phoneBill.Models;

namespace phoneBill.Data
{

    public partial class db_phonebillModel : DbContext
    {

        public db_phonebillModel() :
            base()
        {
            OnCreated();
        }

        public db_phonebillModel(DbContextOptions<db_phonebillModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnect"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Member> Members
        {
            get;
            set;
        }

        public virtual DbSet<Promotion> Promotions
        {
            get;
            set;
        }

        public virtual DbSet<Userlog> Userlogs
        {
            get;
            set;
        }

        public virtual DbSet<VPromotion> VPromotions
        {
            get;
            set;
        }

        public virtual DbSet<VBilllist> VBilllists
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<VUserAuth> VUserAuths
        {
            get;
            set;
        }

        public virtual DbSet<Bill> Bills
        {
            get;
            set;
        }

        public virtual DbSet<VMember> VMembers
        {
            get;
            set;
        }

        public virtual DbSet<VEmplist> VEmplists
        {
            get;
            set;
        }

        public virtual DbSet<Monthlist> Monthlists
        {
            get;
            set;
        }

        public virtual DbSet<VMonthlist> VMonthlists
        {
            get;
            set;
        }

        #region Methods

        public string DateOnly ()
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.dateOnly";
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<string> DateOnlyAsync ()
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.dateOnly";
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public string TimeOnly ()
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.timeOnly";
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<string> TimeOnlyAsync ()
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.timeOnly";
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.MemberMapping(modelBuilder);
            this.CustomizeMemberMapping(modelBuilder);

            this.PromotionMapping(modelBuilder);
            this.CustomizePromotionMapping(modelBuilder);

            this.UserlogMapping(modelBuilder);
            this.CustomizeUserlogMapping(modelBuilder);

            this.VPromotionMapping(modelBuilder);
            this.CustomizeVPromotionMapping(modelBuilder);

            this.VBilllistMapping(modelBuilder);
            this.CustomizeVBilllistMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.VUserAuthMapping(modelBuilder);
            this.CustomizeVUserAuthMapping(modelBuilder);

            this.BillMapping(modelBuilder);
            this.CustomizeBillMapping(modelBuilder);

            this.VMemberMapping(modelBuilder);
            this.CustomizeVMemberMapping(modelBuilder);

            this.VEmplistMapping(modelBuilder);
            this.CustomizeVEmplistMapping(modelBuilder);

            this.MonthlistMapping(modelBuilder);
            this.CustomizeMonthlistMapping(modelBuilder);

            this.VMonthlistMapping(modelBuilder);
            this.CustomizeVMonthlistMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Member Mapping

        private void MemberMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Member>().ToTable(@"Member", @"dbo");
            modelBuilder.Entity<Member>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Member>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Member>().Property(x => x.Telephone).HasColumnName(@"Telephone").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Member>().Property(x => x.EmpID).HasColumnName(@"Emp_ID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Member>().Property(x => x.PromotionID).HasColumnName(@"PromotionID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Member>().Property(x => x.DeleteStatus).HasColumnName(@"DeleteStatus").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Member>().HasKey(@"ID");
        }

        partial void CustomizeMemberMapping(ModelBuilder modelBuilder);

        #endregion

        #region Promotion Mapping

        private void PromotionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Promotion>().ToTable(@"Promotion", @"dbo");
            modelBuilder.Entity<Promotion>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Promotion>().Property(x => x.Promotion1).HasColumnName(@"Promotion").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Promotion>().Property(x => x.Camp).HasColumnName(@"Camp").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Promotion>().Property(x => x.DeleteStatus).HasColumnName(@"DeleteStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Promotion>().HasKey(@"ID");
        }

        partial void CustomizePromotionMapping(ModelBuilder modelBuilder);

        #endregion

        #region Userlog Mapping

        private void UserlogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Userlog>().ToTable(@"userlog", @"dbo");
            modelBuilder.Entity<Userlog>().Property(x => x.Username).HasColumnName(@"username").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Userlog>().Property(x => x.Pwd).HasColumnName(@"pwd").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Userlog>().HasKey(@"Username");
        }

        partial void CustomizeUserlogMapping(ModelBuilder modelBuilder);

        #endregion

        #region VPromotion Mapping

        private void VPromotionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VPromotion>().ToTable(@"V_Promotion", @"dbo");
            modelBuilder.Entity<VPromotion>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<VPromotion>().Property(x => x.Promotion).HasColumnName(@"Promotion").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VPromotion>().Property(x => x.Camp).HasColumnName(@"Camp").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<VPromotion>().Property(x => x.DeleteStatus).HasColumnName(@"DeleteStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<VPromotion>().HasKey(@"ID");
        }

        partial void CustomizeVPromotionMapping(ModelBuilder modelBuilder);

        #endregion

        #region VBilllist Mapping

        private void VBilllistMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VBilllist>().ToTable(@"V_Billlist", @"dbo");
            modelBuilder.Entity<VBilllist>().Property(x => x.IDAUTO).HasColumnName(@"IDAUTO").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.MemberID).HasColumnName(@"MemberID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.Dateonly).HasColumnName(@"Dateonly").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.YearBill).HasColumnName(@"YearBill").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.Phonenumber).HasColumnName(@"Phonenumber").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.Timeonly).HasColumnName(@"Timeonly").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.PromotionCost).HasColumnName(@"PromotionCost").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.Notification).HasColumnName(@"Notification").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.ExcessCost).HasColumnName(@"ExcessCost").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.InterCallingCharge).HasColumnName(@"InterCallingCharge").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.AdditionalServiceFee).HasColumnName(@"AdditionalServiceFee").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.VAT).HasColumnName(@"VAT").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.Promotion).HasColumnName(@"Promotion").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.Camp).HasColumnName(@"Camp").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<VBilllist>().Property(x => x.DeleteStatus).HasColumnName(@"DeleteStatus").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.MonthID).HasColumnName(@"MonthID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.Expr1).HasColumnName(@"Expr1").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.MonthName).HasColumnName(@"MonthName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().Property(x => x.EmpID).HasColumnName(@"Emp_ID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VBilllist>().Property(x => x.TotalService).HasColumnName(@"TotalService").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<VBilllist>().HasKey(@"IDAUTO");
        }

        partial void CustomizeVBilllistMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"User", @"dbo");
            modelBuilder.Entity<User>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property(x => x.Username).HasColumnName(@"Username").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.Password).HasColumnName(@"Password").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.DateLogin).HasColumnName(@"DateLogin").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.ImgProfile).HasColumnName(@"ImgProfile").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.DeleteStatus).HasColumnName(@"DeleteStatus").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<User>().HasKey(@"ID");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region VUserAuth Mapping

        private void VUserAuthMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VUserAuth>().ToTable(@"V_UserAuth", @"dbo");
            modelBuilder.Entity<VUserAuth>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VUserAuth>().Property(x => x.EMPID).HasColumnName(@"EMP_ID").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<VUserAuth>().Property(x => x.FIRSTNAME).HasColumnName(@"FIRSTNAME").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VUserAuth>().Property(x => x.SURNAME).HasColumnName(@"SURNAME").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VUserAuth>().Property(x => x.IDCARD).HasColumnName(@"ID_CARD").HasColumnType(@"nvarchar(13)").ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<VUserAuth>().Property(x => x.Fullname).HasColumnName(@"Fullname").HasColumnType(@"nvarchar(102)").ValueGeneratedNever().HasMaxLength(102);
            modelBuilder.Entity<VUserAuth>().Property(x => x.Level).HasColumnName(@"Level").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<VUserAuth>().Property(x => x.POSITION).HasColumnName(@"POSITION").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<VUserAuth>().Property(x => x.DEPNAME).HasColumnName(@"DEP_NAME").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<VUserAuth>().Property(x => x.SecName).HasColumnName(@"sec_name").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VUserAuth>().Property(x => x.Expr1).HasColumnName(@"Expr1").HasColumnType(@"nvarchar(124)").ValueGeneratedNever().HasMaxLength(124);
            modelBuilder.Entity<VUserAuth>().Property(x => x.ENDDATE).HasColumnName(@"END_DATE").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<VUserAuth>().Property(x => x.DEPID).HasColumnName(@"DEP_ID").HasColumnType(@"nvarchar(4)").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VUserAuth>().Property(x => x.NAMEENG).HasColumnName(@"NAME_ENG").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VUserAuth>().Property(x => x.SURNAMEENG).HasColumnName(@"SURNAME_ENG").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VUserAuth>().Property(x => x.Username).HasColumnName(@"Username").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VUserAuth>().Property(x => x.Password).HasColumnName(@"Password").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VUserAuth>().Property(x => x.ImgProfile).HasColumnName(@"ImgProfile").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VUserAuth>().Property(x => x.DeleteStatus).HasColumnName(@"DeleteStatus").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<VUserAuth>().Property(x => x.DateLogin).HasColumnName(@"DateLogin").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VUserAuth>().HasKey(@"ID");
        }

        partial void CustomizeVUserAuthMapping(ModelBuilder modelBuilder);

        #endregion

        #region Bill Mapping

        private void BillMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Bill>().ToTable(@"Bill", @"dbo");
            modelBuilder.Entity<Bill>().Property(x => x.IDAUTO).HasColumnName(@"IDAUTO").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Bill>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Bill>().Property(x => x.MemberID).HasColumnName(@"MemberID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Bill>().Property(x => x.Dateonly).HasColumnName(@"Dateonly").HasColumnType(@"nvarchar(50)").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"[dbo].[dateOnly]()");
            modelBuilder.Entity<Bill>().Property(x => x.Timeonly).HasColumnName(@"Timeonly").HasColumnType(@"nvarchar(50)").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"[dbo].[timeOnly]()");
            modelBuilder.Entity<Bill>().Property(x => x.MonthID).HasColumnName(@"MonthID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Bill>().Property(x => x.MonthBill).HasColumnName(@"MonthBill").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Bill>().Property(x => x.YearBill).HasColumnName(@"YearBill").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Bill>().Property(x => x.Phonenumber).HasColumnName(@"Phonenumber").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Bill>().Property(x => x.PromotionCost).HasColumnName(@"PromotionCost").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<Bill>().Property(x => x.ExcessCost).HasColumnName(@"ExcessCost").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<Bill>().Property(x => x.InterCallingCharge).HasColumnName(@"InterCallingCharge").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<Bill>().Property(x => x.AdditionalServiceFee).HasColumnName(@"AdditionalServiceFee").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<Bill>().Property(x => x.VAT).HasColumnName(@"VAT").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<Bill>().Property(x => x.Notification).HasColumnName(@"Notification").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Bill>().Property(x => x.DeleteStatus).HasColumnName(@"DeleteStatus").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Bill>().HasKey(@"IDAUTO");
        }

        partial void CustomizeBillMapping(ModelBuilder modelBuilder);

        #endregion

        #region VMember Mapping

        private void VMemberMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VMember>().ToTable(@"V_Member", @"dbo");
            modelBuilder.Entity<VMember>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VMember>().Property(x => x.EmpID).HasColumnName(@"Emp_ID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VMember>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VMember>().Property(x => x.Telephone).HasColumnName(@"Telephone").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VMember>().Property(x => x.Promotion).HasColumnName(@"Promotion").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VMember>().Property(x => x.Camp).HasColumnName(@"Camp").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<VMember>().Property(x => x.DeleteStatus).HasColumnName(@"DeleteStatus").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<VMember>().HasKey(@"ID");
        }

        partial void CustomizeVMemberMapping(ModelBuilder modelBuilder);

        #endregion

        #region VEmplist Mapping

        private void VEmplistMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VEmplist>().ToTable(@"V_Emplist", @"dbo");
            modelBuilder.Entity<VEmplist>().Property(x => x.EMPID).HasColumnName(@"EMP_ID").HasColumnType(@"nvarchar(20)").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<VEmplist>().Property(x => x.FIRSTNAME).HasColumnName(@"FIRSTNAME").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VEmplist>().Property(x => x.SURNAME).HasColumnName(@"SURNAME").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VEmplist>().Property(x => x.IDCARD).HasColumnName(@"ID_CARD").HasColumnType(@"nvarchar(13)").ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<VEmplist>().Property(x => x.Fullname).HasColumnName(@"Fullname").HasColumnType(@"nvarchar(102)").ValueGeneratedNever().HasMaxLength(102);
            modelBuilder.Entity<VEmplist>().Property(x => x.Level).HasColumnName(@"Level").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<VEmplist>().Property(x => x.POSITION).HasColumnName(@"POSITION").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<VEmplist>().Property(x => x.DEPNAME).HasColumnName(@"DEP_NAME").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<VEmplist>().Property(x => x.SecName).HasColumnName(@"sec_name").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VEmplist>().Property(x => x.Expr1).HasColumnName(@"Expr1").HasColumnType(@"nvarchar(124)").ValueGeneratedNever().HasMaxLength(124);
            modelBuilder.Entity<VEmplist>().Property(x => x.ENDDATE).HasColumnName(@"END_DATE").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<VEmplist>().Property(x => x.DEPID).HasColumnName(@"DEP_ID").HasColumnType(@"nvarchar(4)").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VEmplist>().Property(x => x.NAMEENG).HasColumnName(@"NAME_ENG").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VEmplist>().Property(x => x.SURNAMEENG).HasColumnName(@"SURNAME_ENG").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VEmplist>().HasKey(@"EMPID");
        }

        partial void CustomizeVEmplistMapping(ModelBuilder modelBuilder);

        #endregion

        #region Monthlist Mapping

        private void MonthlistMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Monthlist>().ToTable(@"Monthlist", @"dbo");
            modelBuilder.Entity<Monthlist>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Monthlist>().Property(x => x.MonthID).HasColumnName(@"MonthID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Monthlist>().Property(x => x.MonthName).HasColumnName(@"MonthName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Monthlist>().HasKey(@"ID");
        }

        partial void CustomizeMonthlistMapping(ModelBuilder modelBuilder);

        #endregion

        #region VMonthlist Mapping

        private void VMonthlistMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VMonthlist>().ToTable(@"V_Monthlist", @"dbo");
            modelBuilder.Entity<VMonthlist>().Property(x => x.MonthID).HasColumnName(@"MonthID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VMonthlist>().Property(x => x.MonthName).HasColumnName(@"MonthName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<VMonthlist>().HasKey(@"MonthID");
        }

        partial void CustomizeVMonthlistMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
